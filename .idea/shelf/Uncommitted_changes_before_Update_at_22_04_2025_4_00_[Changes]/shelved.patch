Index: java-filmorate/src/test/java/ru/yandex/practicum/filmorate/FilmorateApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.practicum.filmorate;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport ru.yandex.practicum.filmorate.controller.FilmController;\r\nimport ru.yandex.practicum.filmorate.controller.UserController;\r\nimport ru.yandex.practicum.filmorate.exception.NotFoundException;\r\nimport ru.yandex.practicum.filmorate.exception.ValidationException;\r\nimport ru.yandex.practicum.filmorate.model.Film;\r\nimport ru.yandex.practicum.filmorate.model.User;\r\n\r\nimport java.util.Calendar;\r\nimport java.time.LocalDate;\r\nimport java.util.Collection;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest\r\nclass FilmorateApplicationTests {\r\n\r\n\t@Autowired\r\n\tprivate FilmController filmController;\r\n\r\n\t@Autowired\r\n\tprivate UserController userController;\r\n\r\n\t@Test\r\n\tpublic void testFilmReleaseDate() {\r\n\t\tLocalDate bornOfFilms = LocalDate.of(1590, Calendar.JULY, 15);\r\n\r\n\r\n\t\tFilm film = new Film();\r\n\t\tfilm.setName(\"Test Film\");\r\n\t\tfilm.setDescription(\"Description\");\r\n\t\tfilm.setReleaseDate(bornOfFilms);\r\n\t\tfilm.setDuration(120);\r\n\r\n\t\tassertThrows(ValidationException.class, () -> filmController.create(film));\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testUserUpdateNotFound() {\r\n\t\tUser user = new User();\r\n\t\tuser.setEmail(\"test@example.com\");\r\n\t\tuser.setLogin(\"login\");\r\n\t\tuser.setName(\"name\");\r\n\t\tuser.setBirthday(LocalDate.of(2000, Calendar.FEBRUARY, 15));\r\n\r\n\t\tassertThrows(NotFoundException.class, () -> userController.update(user));\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testFilmUpdateNotFound() {\r\n\t\tFilm film = new Film();\r\n\t\tfilm.setId(1L);\r\n\t\tfilm.setDescription(\"Description\");\r\n\t\tfilm.setDuration(12);\r\n\t\tfilm.setName(\"name\");\r\n\t\tfilm.setReleaseDate(LocalDate.of(2000, Calendar.APRIL, 12));\r\n\r\n\t\tassertThrows(NotFoundException.class, () -> filmController.update(film));\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testCreateUserSuccessfully() {\r\n\t\tUser user1 = new User();\r\n\t\tuser1.setEmail(\"valid-email123@example.com\");\r\n\t\tuser1.setLogin(\"validLogin\");\r\n\t\tuser1.setName(\"Valid Name\");\r\n\t\tuser1.setBirthday(LocalDate.of(2000, Calendar.APRIL, 23));\r\n\r\n\t\tUser createdUser = userController.create(user1);\r\n\r\n\t\tassertNotNull(createdUser);\r\n\t\tassertEquals(\"valid-email123@example.com\", createdUser.getEmail());\r\n\t\tassertEquals(\"validLogin\", createdUser.getLogin());\r\n\t\tassertEquals(\"Valid Name\", createdUser.getName());\r\n\t\tassertEquals(LocalDate.of(2000, Calendar.APRIL, 23), createdUser.getBirthday());\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testUpdateUserSuccessfully() {\r\n\t\t// Создаем пользователя\r\n\t\tUser user2 = new User();\r\n\t\tuser2.setEmail(\"valid-email456@example.com\");\r\n\t\tuser2.setLogin(\"validLogin\");\r\n\t\tuser2.setName(\"Valid Name\");\r\n\t\tuser2.setBirthday(LocalDate.of(2000, Calendar.APRIL, 23));\r\n\t\tUser createdUser = userController.create(user2);\r\n\r\n\t\t// Обновляем данные пользователя\r\n\t\tcreatedUser.setName(\"Updated Name\");\r\n\t\tcreatedUser.setEmail(\"updated-email@example.com\");\r\n\r\n\t\tUser updatedUser = userController.update(createdUser);\r\n\r\n\t\tassertNotNull(updatedUser);\r\n\t\tassertEquals(\"updated-email@example.com\", updatedUser.getEmail());\r\n\t\tassertEquals(\"Updated Name\", updatedUser.getName());\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testFindAllUsers() {\r\n\t\tCollection<User> users = userController.findAll();\r\n\t\tassertNotNull(users);\r\n\t\tassertTrue(users.isEmpty()); // Предполагаем, что изначально нет пользователей\r\n\r\n\t\t// Создаем пользователя\r\n\t\tUser user = new User();\r\n\t\tuser.setEmail(\"valid-email@example.com\");\r\n\t\tuser.setLogin(\"validLogin\");\r\n\t\tuser.setName(\"Valid Name\");\r\n\t\tuser.setBirthday(LocalDate.of(2000, Calendar.APRIL, 23));\r\n\t\tuserController.create(user);\r\n\r\n\t\tusers = userController.findAll();\r\n\t\tassertEquals(1, users.size());\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java-filmorate/src/test/java/ru/yandex/practicum/filmorate/FilmorateApplicationTests.java b/java-filmorate/src/test/java/ru/yandex/practicum/filmorate/FilmorateApplicationTests.java
--- a/java-filmorate/src/test/java/ru/yandex/practicum/filmorate/FilmorateApplicationTests.java	(revision 03e8f437481543c9ce34d21f61657180f8fca059)
+++ b/java-filmorate/src/test/java/ru/yandex/practicum/filmorate/FilmorateApplicationTests.java	(date 1745279981242)
@@ -29,7 +29,6 @@
 	public void testFilmReleaseDate() {
 		LocalDate bornOfFilms = LocalDate.of(1590, Calendar.JULY, 15);
 
-
 		Film film = new Film();
 		film.setName("Test Film");
 		film.setDescription("Description");
